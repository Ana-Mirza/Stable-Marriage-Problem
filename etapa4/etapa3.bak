#lang racket

(require "etapa2.rkt")

(provide (all-defined-out))

; TODO 1
; După modelul funcției stable-match?, implementați funcția
; get-unstable-couples care primește o listă de logodne
; engagements, o listă de preferințe masculine mpref și o 
; listă de preferințe feminine wpref, și întoarce lista
; tuturor cuplurilor instabile din engagements.
; Precizări (aspecte care se garantează, nu trebuie verificate):
; - fiecare cuplu din lista engagements are pe prima poziție
;   o femeie
; Nu este permisă recursivitatea pe stivă.
; Nu sunt permise alte funcții ajutătoare decât
; better-match-exists? și funcțiile de manipulare a listelor de
; preferințe definite în etapele anterioare.
; Nu este permisă apelarea multiplă a aceleiași funcții pe
; aceleași argumente.
; Folosiți una sau mai multe dintre expresiile let, let*, letrec,
; named let pentru a vă putea conforma acestor restricții.

;(define (get-unstable-couples engagements mpref wpref)
;  (let ((deep-reverse (lambda (x) (map (lambda (x) (cons (cdr x) (car x))) engagements))))
;    (filter (lambda (x) (or (better-match-exists? (cdr x) (car x) (get-pref-list mpref (cdr x)) wpref engagements)
                          (better-match-exists? (car x) (cdr x) (get-pref-list wpref (car x)) mpref (deep-reverse engagements)))) engagements)))

(define (get-unstable-couples engagements mpref wpref)
  (letrec
      ((deep-reverse (lambda (eng)
                         (if (null? eng)
                             eng
                             (let ((first (car eng)))
                               (cons (cons (cdr first) (car first)) (deep-reverse (cdr eng)))))))
       (solve (lambda (x)
                (if
                  (null? x) x
                  (let* ((pair (car x)) (first (car pair)) (second (cdr pair)))
                    (if (or (better-match-exists? second first (get-pref-list mpref second) wpref engagements)
                            (better-match-exists? first second (get-pref-list wpref first) mpref (deep-reverse engagements))) (cons pair (solve (cdr x)))
                                                                                                                                   (solve (cdr x))))))))
    (solve engagements)))


; TODO 2
; Implementați funcția engage care primește o listă free-men
; de bărbați încă nelogodiți, o listă de logodne parțiale 
; engagements (unde fiecare cuplu are pe prima poziție o femeie),
; o listă de preferințe masculine mpref și o listă de preferințe 
; feminine wpref, și întoarce o listă completă de logodne stabile,
; obținută conform algoritmului Gale-Shapley:
; - cât timp există un bărbat m încă nelogodit
;   - w = prima femeie din preferințele lui m pe care m nu a cerut-o încă
;   - dacă w este nelogodită, adaugă perechea (w, m) la engagements
;   - dacă w este logodită cu m'
;     - dacă w îl preferă pe m lui m'
;       - m' devine liber
;       - actualizează partenerul lui w la m în engagements
;     - altfel, repetă procesul cu următoarea femeie din lista lui m
; Folosiți named let pentru orice proces recursiv ajutător (deci nu
; veți defini funcții ajutătoare recursive).
; Folosiți let și/sau let* pentru a evita calcule duplicate.

(define (engage free-men engagements mpref wpref)
  (let iter ((free-men free-men) (eng engagements))
    (if (null? free-men)
        eng
        (let iter2 ((pref-list (get-pref-list mpref (car free-men))))
          (let* ((man (car free-men)) (woman (car pref-list)) (partner (get-partner eng woman)))
            (cond
              ((false? partner) (iter (cdr free-men) (cons (cons woman man) eng)))
              ((preferable? (get-pref-list wpref woman) man partner) (iter (cons partner (cdr free-men)) (update-engagements eng woman man)))
              (else (iter2 (cdr pref-list)))))))))


; TODO 3
; Implementați funcția gale-shapley care este un wrapper pentru
; algoritmul implementat de funcția engage. Funcția gale-shapley
; primește doar o listă de preferințe masculine mpref și o listă
; de preferințe feminine wpref și calculează o listă completă de
; logodne stabile conform acestor preferințe.
(define (gale-shapley mpref wpref)
  (engage (get-men mpref) null mpref wpref))


; TODO 4
; Implementați funcția get-couple-members care primește o listă
; de perechi cu punct și întoarce o listă simplă cu toate elementele 
; care apar în perechi.
; Folosiți funcționale, fără recursivitate explicită.
(define (get-couple-members pair-list)
  ((compose flatten map) flatten pair-list))

